# -*- coding: utf-8 -*-
"""deep_learning_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wp9veZtSo-mczck1TFq2l5gkUTUW3m6h
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout
from sklearn.metrics import accuracy_score, confusion_matrix

def train_lstm_model(X_train, y_train, X_test, y_test):
    """
    Train an LSTM model for binary classification.
    :param X_train: Training feature data (reshaped for LSTM).
    :param y_train: Training target labels.
    :param X_test: Testing feature data (reshaped for LSTM).
    :param y_test: Testing target labels.
    :return: Accuracy and confusion matrix.
    """
    # Reshape data for LSTM (samples, timesteps, features)
    X_train = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))
    X_test = X_test.reshape((X_test.shape[0], 1, X_test.shape[1]))

    # Define LSTM model
    model = Sequential([
        LSTM(64, input_shape=(1, X_train.shape[2]), activation='tanh', return_sequences=False),
        Dropout(0.2),
        Dense(1, activation='sigmoid')  # Output layer for binary classification
    ])

    # Compile the model
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

    # Train the model
    model.fit(X_train, y_train, epochs=50, batch_size=16, verbose=1)

    # Evaluate the model
    y_pred = (model.predict(X_test) > 0.5).astype("int32")
    accuracy = accuracy_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)

    return accuracy, cm

if __name__ == "__main__":
    # Example usage
    from data_preprocessing_fixed import load_and_preprocess_data

    # Load preprocessed data
    file_path = "diabetes.csv"  # Update with the actual path to the dataset
    X_train, X_test, y_train, y_test = load_and_preprocess_data(file_path)

    # Train and evaluate LSTM model
    accuracy, cm = train_lstm_model(X_train, y_train, X_test, y_test)

    print(f"LSTM Model Accuracy: {accuracy * 100:.2f}%")
    print("Confusion Matrix:")
    print(cm)