# -*- coding: utf-8 -*-
"""knn_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G8a2_w4q1wh--uZO0caIvj0ZzKtmHa2V
"""

import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

def train_knn(X_train, y_train, X_test, y_test, k=5):
    """
    Train a K-Nearest Neighbors (KNN) classifier and evaluate its performance.
    :param X_train: Training feature data.
    :param y_train: Training target labels.
    :param X_test: Testing feature data.
    :param y_test: Testing target labels.
    :param k: Number of neighbors for KNN.
    :return: Accuracy and confusion matrix.
    """
    # Initialize the KNN model
    knn_model = KNeighborsClassifier(n_neighbors=k)

    # Train the model
    knn_model.fit(X_train, y_train)

    # Make predictions
    y_pred = knn_model.predict(X_test)

    # Calculate accuracy
    accuracy = accuracy_score(y_test, y_pred)

    # Generate confusion matrix
    cm = confusion_matrix(y_test, y_pred)

    return accuracy, cm

if __name__ == "__main__":
    # Example usage
    from data_preprocessing_fixed import load_and_preprocess_data

    # Load preprocessed data
    file_path = "diabetes.csv"  # Update with actual path to the dataset
    X_train, X_test, y_train, y_test = load_and_preprocess_data(file_path)

    # Train and evaluate KNN
    accuracy, cm = train_knn(X_train, y_train, X_test, y_test, k=5)

    print(f"KNN Accuracy: {accuracy * 100:.2f}%")
    print("Confusion Matrix:")
    print(cm)