# -*- coding: utf-8 -*-
"""random_forrest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G-YAqE8HCeKnYHpCLpOWjKs7b1oNxqpf
"""

import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
from performance_evaluation import calculate_metrics, cross_validate_model

def train_random_forest(X_train, y_train, X_test, y_test):
    """
    Train a Random Forest classifier and evaluate its performance.
    :param X_train: Training feature data.
    :param y_train: Training target labels.
    :param X_test: Testing feature data.
    :param y_test: Testing target labels.
    :return: Accuracy and confusion matrix.
    """
    # Initialize the model
    rf_model = RandomForestClassifier(random_state=42, n_estimators=100)

    # Train the model
    rf_model.fit(X_train, y_train)

    # Make predictions
    y_pred = rf_model.predict(X_test)

    # Calculate accuracy
    accuracy = accuracy_score(y_test, y_pred)

    # Generate confusion matrix
    cm = confusion_matrix(y_test, y_pred)

    return accuracy, cm

if _name_ == "_main_":
    from data_preprocessing import load_and_preprocess_data

    # Load preprocessed data
    file_path = "diabetes.csv"  # Update with actual path to the dataset
    X_train, X_test, y_train, y_test = load_and_preprocess_data(file_path)

    # Train and evaluate Random Forest
    accuracy, cm = train_random_forest(X_train, y_train, X_test, y_test)

    print(f"Random Forest Accuracy: {accuracy * 100:.2f}%")
    print("Confusion Matrix:")
    print(cm)

    # Perform 10-fold cross-validation
    X = np.vstack((X_train, X_test))
    y = np.concatenate((y_train, y_test))
    rf_model = RandomForestClassifier(random_state=42, n_estimators=100)
    avg_metrics = cross_validate_model(rf_model, X, y, n_splits=10)

    print("\nAverage Metrics from 10-Fold Cross-Validation:")
    for key, value in avg_metrics.items():
        print(f"{key}: {value:.4f}")